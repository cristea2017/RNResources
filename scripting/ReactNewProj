#!/bin/bash
echo "Project name:"
    read name
  echo "need typescript? y/n"
    read typescript
cd Desktop
npx react-native init $name
cd $name
npm i react-native-gesture-handler react-native-reanimated react-navigation react-redux redux redux-persist redux-thunk @react-native-community/async-storage react-navigation-tabs react-navigation-stack --save
npm install redux-logger --save-dev


jq '.scripts += {"images":"node App/scripts/images.js"}' package.json
jq '.scripts += {"fonts":"node App/scripts/fonts.js"}' package.json
mkdir -p App/assets/images
mkdir -p App/assets/fonts
mkdir -p App/screens
mkdir -p App/components
mkdir -p App/navigation
mkdir -p App/redux
mkdir -p App/scripts
cd App/scripts
touch images.js
sudo sh -c 'echo "const fs = require('fs')

const imageFileNames = () => {
  const array = fs
    .readdirSync('App/assets/images')
    .filter((file) => {
      return file.endsWith('.png')
    })
    .map((file) => {
      return file.replace('@2x.png', '').replace('@3x.png', '').replace('.png','')
    })
    
return Array.from(new Set(array))
}

const generate = () => {
  let properties = imageFileNames()
    .map((name) => {
      return `${name.replace(/-+?/g, '_')}: require('./images/${name}.png')`
    })
    .join(',\n  ')
    
const string = `const images = {
  ${properties}
}

export default images
`

fs.writeFileSync('App/assets/images.ts', string, 'utf8')
}

generate()" >> images.js'
touch fonts.js

sudo sh -c  'echo "const fs = require('fs')

const fontFileNames = () => {
  const array = fs
    .readdirSync('App/assets/fonts')
    .map((file) => {
      return file.replace('.ttf', '').replace('.otf','')
    })
    
return Array.from(new Set(array))
}

const generate = () => {
  const properties = fontFileNames()
    .map((name) => {
      const key = name.replace(/\s/g, '')
      return `${key.replace(/-+?/g, '_').toLowerCase()}: '${name}'`
    })
    .join(',\n  ')
    
const string = `const fonts = {
  ${properties}
}

export default fonts
`

fs.writeFileSync('App/assets/fonts.ts', string, 'utf8')
}

generate()

" >> fonts.js'

cd -

    if [[ $typescript == y ]] ; then
    echo 'Installing typescript....'
    npm i --save-dev @types/jest @types/react @types/react-native @types/react-test-renderer typescript ts-jest react-native-typescript-transformer react-test-renderer react-addons-test-utils
    touch rn-cli.config.js
    sudo sh -c 'echo "module.exports = {
  getTransformModulePath() {
    return require.resolve("react-native-typescript-transformer");
  },
  getSourceExts() {
    return ["ts", "tsx"];
  }
};" >> rn-cli.config.js'
jq '.jest = {"preset": "react-native","moduleFileExtensions": [  "ts", "tsx", "js" ], "transform": {"^.+\\.(js)$": "<rootDir>/node_modules/babel-jest", "\\.(ts|tsx)$": "<rootDir>/node_modules/ts-jest/preprocessor.js"}, "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","testPathIgnorePatterns": [ "\\.snap$", "<rootDir>/node_modules/"], "cacheDirectory": ".jest/cache"}' package.json


touch App.tsx
sudo sh -c 'echo "/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow
 */

import React from 'react';
import Navigator from './App/navigation/Navigation';

class App extends React.Component {

  render(){
    return (
      <Navigator/>
      )
  }
  
};

export default App;" >> App.tsx'
unlink App.js

cd App/navigation
touch Navigation.tsx
sudo sh -c 'echo "import { createAppContainer } from 'react-navigation';
import { createBottomTabNavigator } from 'react-navigation-tabs';
import { createStackNavigator } from 'react-navigation-stack';
import createAnimatedSwitchNavigator from 'react-navigation-animated-switch';
import React from 'react';
import { Component } from 'react'
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/es/integration/react'
import { store, persistor } from '../redux/store';
import EStyleSheet from 'react-native-extended-stylesheet';
import { Platform, Dimensions,} from 'react-native';


const MainStack = createStackNavigator({
   
});


let Nav = createAppContainer(MainStack);

export default class Navigator extends Component {

    render() {
        return (
            <Provider store={store}>
                <PersistGate
                    loading={null}
                    persistor={persistor}
                >
                   <Nav/>
                </PersistGate>

            </Provider>
        )
    }
}

const width = Dimensions.get('screen').width;
EStyleSheet.build({
    $rem: Platform.select({
        ios: Platform.isPad ? width / 750 : width / 375
        ,
        android: width / 375
    })
  });" >> Navigation.tsx'

cd -

cd App/redux
touch store.ts
sudo sh -c 'echo "import AsyncStorage from '@react-native-community/async-storage';
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import { persistStore, persistReducer } from 'redux-persist';
import logger from 'redux-logger'
import rootReducer from './reducerIndex';

const middleware : any = [thunk];

if (process.env.NODE_ENV !== 'production') {  
  middleware.push(logger);
}

const persistConfig = {
  key: 'root',
  storage: AsyncStorage,
  blacklist: ['AppReducer'],
};

const persistedReducer = persistReducer(persistConfig, rootReducer)

const store = createStore(
  persistedReducer,
  applyMiddleware(...middleware),
);

let persistor = persistStore(store);

export {
  store,
  persistor,
};" >> store.ts'

touch reducerIndex.ts

sudo sh -c 'echo "import { combineReducers } from 'redux';
import AppReducer from './App/AppReducer';


const rootReducer = combineReducers({
    AppReducer: AppReducer,
});

export default rootReducer;" >> reducerIndex.ts'

mkdir App
cd App

touch types.ts

sudo sh -c 'echo "export const SET_LOGIN = 'SET_LOGIN'" >> types.ts'

touch AppReducer.ts
sudo sh -c 'echo "
import { SET_LOGIN } from "./types";



const initialState = {
    isLoged: false,
};


const AppReducer = (state = initialState, action : any) => {

    switch (action.type) {
        case SET_LOGIN:
            return {...state , isLoged: action.isLoged}
        default:
            return state;
    }
};

export default AppReducer;" >> AppReducer.ts'

touch actions.ts
sudo sh -c 'echo "import { SET_LOGIN } from "./types";


export const setLogin = (isLoged: boolean) => (
    {
      type: SET_LOGIN,
      isLoged
    }
  );
" >> actions.ts'

cd -
fi

cd Desktop
cd $name
cd ios
pod install

echo "$name project succesfully created!"

echo -e "\033[1;42m $name project succesfully created! \n Uncomment allowSyntheticDefaultImports from tsconfig.json \033[0m"
echo -e '\033[1;41mhttps://github.com/microsoft/TypeScript-React-Native-Starter\033[0m'
